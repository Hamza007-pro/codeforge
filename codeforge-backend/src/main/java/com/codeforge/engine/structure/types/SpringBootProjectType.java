package com.codeforge.engine.structure.types;

import com.codeforge.engine.structure.ProjectStructure;
import com.codeforge.engine.structure.ProjectType;
import com.codeforge.engine.structure.dependency.Dependency;
import com.codeforge.engine.structure.dependency.DependencyManager;

/**
 * Spring Boot project type implementation.
 */
public class SpringBootProjectType implements ProjectType {
    private static final String SPRING_BOOT_VERSION = "3.2.1";

    @Override
    public String getTypeName() {
        return "Spring Boot Application";
    }

    @Override
    public String getDescription() {
        return "Creates a Spring Boot application with basic configuration and structure";
    }

    @Override
    public String getMinJavaVersion() {
        return "17";
    }

    @Override
    public void customizeStructure(ProjectStructure structure) {
        String basePackage = structure.getBasePackage();
        String projectName = structure.getName();
        String packagePath = basePackage.replace(".", "/");

        // Add main source directories
        structure.addDirectory("src/main/java");
        structure.addDirectory("src/main/resources");
        structure.addDirectory("src/test/java");
        structure.addDirectory("src/test/resources");

        // Add package directories
        structure.addDirectory("src/main/java/" + packagePath);
        structure.addDirectory("src/test/java/" + packagePath);

        // Add basic configuration files
        structure.addFile("pom.xml", createPomXml(basePackage, projectName));
        structure.addFile("src/main/resources/application.properties", createApplicationProperties());
        structure.addFile("src/main/java/" + packagePath + "/" + projectName + "Application.java", 
                         createMainApplication(basePackage, projectName));
    }

    @Override
    public ProjectStructure createProjectStructure(String basePackage, String projectName, DependencyManager dependencyManager) {
        ProjectStructure structure = new ProjectStructure(basePackage, projectName);
        customizeStructure(structure);
        return structure;
    }

    @Override
    public DependencyManager getDefaultDependencyManager() {
        DependencyManager manager = new DependencyManager();
        manager.selectDependency(new Dependency.Builder()
                .groupId("org.springframework.boot")
                .artifactId("spring-boot-starter-web")
                .version(SPRING_BOOT_VERSION)
                .build());
        manager.selectDependency(new Dependency.Builder()
                .groupId("org.springframework.boot")
                .artifactId("spring-boot-starter-test")
                .version(SPRING_BOOT_VERSION)
                .scope("test")
                .build());
        return manager;
    }

    private String createPomXml(String basePackage, String projectName) {
        return """
            <?xml version="1.0" encoding="UTF-8"?>
            <project xmlns="http://maven.apache.org/POM/4.0.0"
                     xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
                     xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd">
                <modelVersion>4.0.0</modelVersion>
                
                <parent>
                    <groupId>org.springframework.boot</groupId>
                    <artifactId>spring-boot-starter-parent</artifactId>
                    <version>%s</version>
                    <relativePath/>
                </parent>
                
                <groupId>%s</groupId>
                <artifactId>%s</artifactId>
                <version>0.0.1-SNAPSHOT</version>
                <name>%s</name>
                <description>Spring Boot project generated by CodeForge</description>
                
                <properties>
                    <java.version>17</java.version>
                </properties>
                
                <dependencies>
                    <dependency>
                        <groupId>org.springframework.boot</groupId>
                        <artifactId>spring-boot-starter-web</artifactId>
                    </dependency>
                    <dependency>
                        <groupId>org.springframework.boot</groupId>
                        <artifactId>spring-boot-starter-test</artifactId>
                        <scope>test</scope>
                    </dependency>
                </dependencies>
                
                <build>
                    <plugins>
                        <plugin>
                            <groupId>org.springframework.boot</groupId>
                            <artifactId>spring-boot-maven-plugin</artifactId>
                        </plugin>
                    </plugins>
                </build>
            </project>
            """.formatted(SPRING_BOOT_VERSION, basePackage, projectName, projectName);
    }

    private String createMainApplication(String basePackage, String projectName) {
        return """
            package %s;
            
            import org.springframework.boot.SpringApplication;
            import org.springframework.boot.autoconfigure.SpringBootApplication;
            
            @SpringBootApplication
            public class %sApplication {
                public static void main(String[] args) {
                    SpringApplication.run(%sApplication.class, args);
                }
            }
            """.formatted(basePackage, projectName, projectName);
    }

    private String createApplicationProperties() {
        return """
            # Server configuration
            server.port=8080
            
            # Spring configuration
            spring.application.name=codeforge-app
            
            # Logging configuration
            logging.level.root=INFO
            logging.level.com.codeforge=DEBUG
            """;
    }
}
